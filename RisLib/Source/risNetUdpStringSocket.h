#pragma once

/*==============================================================================
UDP receive  string socket.
UDP transmit string socket.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risThreadsThreads.h"
#include "risSockets.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{
namespace Net
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Udp receive string socket.
// Messages are a single string.

class  UdpRxStringSocket : public Sockets::BaseUdpSocket
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   Sockets::SocketAddress mFromAddress;

   // Buffer.
   static const int cStringSize = 1000;
   char  mRxString[cStringSize];
   int   mRxLength;

   // General purpose valid flag.
   bool mValidFlag;

   // Metrics.
   int mRxCount;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Infastrcture.

   // Constructor.
   UdpRxStringSocket();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Configure the socket. This does socket and bind calls.
   // These two should be used together
   void configure(int aPort);
   void configure(Sockets::SocketAddress aLocal);

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Receive a string into the allocated receive buffer.
   // It returns true if successful.
   // The recvfrom address is stored in mFromAddress.
   bool doRecvString ();

};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Udp transmit message socket.
// Messages are a single string.

class  UdpTxStringSocket : public Sockets::BaseUdpSocket
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Buffer.
   static const int cStringSize = 1000;
   char  mTxString[cStringSize];
   int   mTxLength;

   // Transmit mutex is used by doSendMsg for mutual exclusion.
   Threads::MutexSemaphore  mTxMutex;

   // General purpose valid flag.
   bool mValidFlag;

   // Metrics.
   int mTxCount;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Infastrcture.

   // Constructor.
   UdpTxStringSocket(); 

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Configure the socket. This does socket and bind calls.
   // These two should be used together
   void configure(int aPort);
   void configure(Sockets::SocketAddress aRemote);

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Send a message over the socket via a blocking send call.
   // It returns true if successful.
   // It is protected by the transmit mutex.
   bool doSendString(char * aString);

};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
}//namespace

